apply plugin: 'kotlin-platform-jvm'
apply from: "$rootDir/gradle/common/dependencies.gradle"

test {
    useJUnitPlatform {
        excludeEngines 'spek2'
    }
}

dependencies {
    implementation project(':spek-runtime')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.junit.platform:junit-platform-engine'
}

dependencies {
    testImplementation 'com.natpryce:hamkrest'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin'
    testImplementation 'org.junit.platform:junit-platform-engine'
    testImplementation 'org.junit.platform:junit-platform-launcher'

    // enable final class mocking
    testRuntimeOnly 'org.mockito:mockito-inline'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

def archiveBaseName = "spek-runner-junit5"
jar {
    baseName = archiveBaseName
}

task sourcesJar(type: Jar) {
    baseName = archiveBaseName
    from project.sourceSets.main.java
    classifier "sources"
}

task stubJavadocJar(type: Jar) {
    baseName = archiveBaseName
    classifier = 'javadoc'
}

apply plugin: 'maven-publish'

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.spekframework.spek2'
            artifactId = 'spek-runner-junit5'

            from components.java
            artifact sourcesJar
            artifact stubJavadocJar

            pom.withXml {
                def root = asNode()
                root.dependencies
                    .dependency
                    .findAll { dep -> dep.artifactId.get(0).text().equals("spek-runtime") }
                    .collect { dep ->
                        dep.artifactId.get(0).setValue('spek-runtime-jvm')
                    }
            }
        }
    }
}

ext.artifacts = ['maven']

apply from: "$rootDir/gradle/common/publish.gradle"